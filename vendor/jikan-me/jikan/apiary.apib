FORMAT: 1A
HOST: https://api.jikan.moe/

# Jikan
[Jikan](https://jikan.moe) is an **Unofficial** MyAnimeList REST-ful API. 
It's built on the Lumen microframework and uses Redis for caching.

It is powered by [JikanPHP](https://github.com/jikan-me/jikan/) for parsing the data from MyAnimeList.


Base URL: `http://api.jikan.moe/`

Base URL (SSL): `https://api.jikan.moe/`

## IMPORTANT ANNOUNCEMENT - 11 APRIL 2018
**Jikan is moving to a new domain! Please use `api.jikan.MOE` in your applciations from now.**

`api.jikan.me` is supported until **May 12th, 2018** - its' expiry.




## Links
- [Website](https://jikan.moe)
- [About](https://jikan.moe/about)
- [Projects/Apps using Jikan](https://jikan.moe/showcase)


- [JikanPHP - Source](https://github.com/jikan-me/jikan/)
- [JikanPy - Wrapper](https://github.com/AWConant/jikanpy) by Andrew Conant
- [Jikan.rb - Wrapper](https://github.com/Zerocchi/jikan.rb) by Zerocchi
- [Jikan.Net - Wrapper](https://github.com/Ervie/jikan.net) by Ervie


# Information
## Rate Limiting
To prevent abuse & rate limit blocks from MyAnimeList, there's a rate-limiting of **5,000** requests per IP per 24 hours.

**Note:** As of REST 2.2, cached requests are no longer throttled! This means the rate limit counter won't increase for requests that are already cached!

### Bulk Requests
This API serves as a purpose for apps/bots/etc that make consistent amount of requests. **If you're using the API for making bulk requests, keep a 3 second delay between each request. Abuse of the API will result in an IP ban.**

## Additional
- Anime/Manga/Character/Person Responses are cached for 72 hours (3 days).
- Search Queries, Top, Schedule, Season endpoints are cached for 6 hours

## Allowed HTTP(s) requests
<pre>
GET: All requests are done via GET
</pre>

# Response Headers
- 200 `OK` - the request was successful.
- 400 `Bad Request` - You've made an invalid request or to an invalid endpoint.
- 404 `Not Found` - The ID you requested doesn't exist
- 405 `Method Not Allowed` - requested method is not supported for resource.
- 429 `Too Many Requests` - You've either hit your daily limit or Jikan has hit the rate limit from MyAnimeList

# Errors
If you get an error response, it'll be within the `error` field. Here's an example:
```
{"error": "Something Happened"}
```

Here's a list of errors you can get and what you could do to over come them.

### Invalid extended request / Unsupported parse request
Check each method for their proper extended requests. For example `/episodes` may exist for anime, but it doesn't exist for manga.

### MyAnimeList Rate Limiting reached
Jikan has made too many requests to MyAnimeList and there's a rate limit in effect from their side. This only lasts for a few seconds.
If you're making API calls in bulk, I suggest adding a delay between each request.

### Invalid or incomplete endpoint
The endpoint you requested either does not exist or you did not make a proper request.

You won't face this issue if there's enough cache lying around.
### No ID/Path given
This message comes from JikanPHP, the core of the REST API. Which pretty much translates to "You haven't provided any anime/manga/character/person `ID` to request.

If you get any other error, it's most likely a PHP error from JikanPHP itself. Please file an [issue](https://github.com/jikan-me/jikan/issues) on the GitHub repo.

### Bad Search Request
You most likely made an invalid search request. Either the type or query is empty. Or perhaps both.

### Server Error
Something happened on the our side, open an [issue](https://github.com/jikan-me/jikan/issues).

### File does not exist
The page that Jikan tried to parse on MyAnimeList does not exist and returns a 404.
This usually happens with item IDs that are non-existent. For example https://myanimelist.net/anime/4 (the anime with this ID does not exist)

# Disclaimer
- Jikan is in no way affiliated with MyAnimeList.
- Jikan is a **free**, open-source API. Use it responsibly.
- **Any abuse of the REST API instance will lead to temporary IP blocks!**


## Anime [/anime/{id}/{request}/{parameter}]
A single anime object with all its details
### Extended Requests
| Request  | Parameter | Description |
| ------------- | ------------- | ------------- |
| characters_staff  | N/A  | Fetches the list of characters & staff members of the anime |
| episodes  | Page number (integer)  | Fetches the list of episodes of the anime |
| news | N/A | News related to the item |
| pictures | N/A | Pictures related to the item |
| videos | N/A | PV & episodes (if any) related to the item |
| stats | N/A | Statistical information related to the item |
| forum | N/A | Forum topics related to the item |
| moreinfo | N/A | More info related to the item |

**Remarks:** The field `episode_last_page` will tell you the last page of the paginated episodes list.

The episodes page on MyAnimeList get paginated after 100 episodes. If there's an anime with more than 100 episodes, you'll have to use the parameter.

### Example Calls
- `/anime/1/characters_staff` // Returns the list of characters and staff
- `/anime/1/episodes` // Defaults to the 1st page
- `/anime/1/episodes/1` // Same as above
- `/anime/1/episodes/2` // Returns 2nd page if there's any


### Anime Request Example+Schema [GET]

+ Parameters
    + id (required, Number, `1`) ... Returns the Anime details from that the ID
    + request (optional, String, `episodes`) ... More details such as characters, staff, episodes
    + parameter (optional, Number, `2`) ... Anime with more than 100 episodes are paginated, hence this parameter is required.

+ Response 200 (application/json)

        [
 
        ]
        

## Manga [/manga/{id}/{request}]
A single manga object with all its details
### Extended Requests
| Request  | Parameter | Description |
| ------------- | ------------- | ------------- |
| characters  | N/A  | Fetches the list of characters & staff members of the manga |
| news | N/A | News related to the item |
| pictures | N/A | Pictures related to the item |
| stats | N/A | Statistical information related to the item |
| forum | N/A | Forum topics related to the item |
| moreinfo | N/A | More info related to the item |

### Example Calls
- `/manga/1/characters` // Returns the list of characters and staff

### Manga Request Example+Schema [GET]

+ Parameters
    + id (required, Number, `1`) ... Returns the Character details from that the ID
    + request (optional, String, `characters`) ... More details such as characters
    
+ Response 200 (application/json)

        [
 
        ]
        
## Person [/person/{id}/{request}]
A single person object with all its details
### Extended Requests
| Request  | Parameter | Description |
| ------------- | ------------- | ------------- |
| pictures | N/A | Pictures related to the item |

### Person Request Example+Schema [GET]

+ Parameters
    + id (required, Number, `1`) ... Returns the Person details from that the ID
    + request (optional, String, `pictures`) ... Pictures related to the item

+ Response 200 (application/json)

        [
 
        ]
        
## Character [/character/{id}/{request}]
A single character object with all its details
### Extended Requests
| Request  | Parameter | Description |
| ------------- | ------------- | ------------- |
| pictures | N/A | Pictures related to the item |

### Character Request Example+Schema [GET]


+ Parameters
    + id (required, Number, `1`) ... Returns the Character details from that the ID
    + request (optional, String, `pictures`) ... Pictures related to the item
   
+ Response 200 (application/json)

        [
 
        ]
        
        
## Search [/search/{type}/{query}/{page}]
Search result object related to the query

**NOTE: MyAnimeList only processes queries with a minimum of 3 letters**
### Parameters
| Parameter  | Argument | Description |
| ------------- | ------------- | ------------- |
| type | anime, manga, person, character | Specify where to search |
| query | STRING | Query you want to search |
| page | INTEGER | Page number of the results |

### Advanced Search Parameters
**Note:** These are search filters which have to be passed as GET `key=value`
| Parameter  | Argument | Description |
| ------------- | ------------- | ------------- |
| q | STRING | For UTF8 characters, percentage encoded and queries including back slashes |
| page | INTEGER | Page number |
| type | `tv` `ova` `movie` `special` `ona` `music` `manga` `novel` `oneshot` `doujin` `manhwa` `manhua` | Filter type of results |
| status | `airing` `completed` `complete` (alias) `tba` `upcoming` (alias) | Filter status of results |
| rated | `g` `pg` `pg13` `r17` `r` `rx` | Filter age rating of results - [View Meaning](https://jikan.moe/docs#advanced-search-rating-constants) |
| genre | INTEGER : 1-43 | These values reflect the genre IDs of MyAnimeList - [View Values](https://jikan.moe/docs#advanced-search-genre-constants) |
| score | FLOAT : 0.0-10.0 | Filter score of results |
| start_date | ISO8601 | Filter start date of results |
| end_date | ISO8601 | Filter end date of results |
| genre_exclude | boolean : 0/1 | To exlude/include the `genre` you added in your request |

#### Examples
`https://api.jikan.moe/search/manga/Grand%20Blue/1`
`https://api.jikan.moe/search/manga?q=Grand%20Blue&page=1`

The first way won't work due to the back slash in "Fate/Zero". It's encouraged to use the the GET method below for all queries since it responds more accurately for UTF8 characters and percentage encoding.

`https://api.jikan.moe/search/anime?q=Fate/Zero&page=1`


### Search Request Example+Schema [GET]


+ Parameters
    + type (required, Integer, `anime`) ... Returns result from anime search
    + query (required, String, `Code`) ... Search query
    + page (optional, Integer, `1`) ... Page of the results
   
+ Response 200 (application/json)

        [
 
        ]
        

## Season [/season/{year}/{season}]
Anime of the specified season

**Note:** Both parameters are required.
### Parameters
| Parameter  | Argument | Description |
| ------------- | ------------- | ------------- |
| year | Integer: Year | Specify the year |
| season | `summer` `spring` `fall` `winter` | Specify the season |

### Season Request Example+Schema [GET]

+ Parameters
    + year (required, Integer, `2018`) ... Returns anime of the year
    + season (required, String, `winter`) ... Returns anime of the season

+ Response 200 (application/json)

        [
 
        ]
        
## Schedule [/schedule/{day}]
Anime of the specified season

**Note:** If you don't pass the `day` parameter, it'll return the schedule for **all** days of the week
### Parameters
| Parameter  | Argument | Description |
| ------------- | ------------- | ------------- |
| day (optional) | `monday` `tuesday` `wednesday` `thursday` `friday` `saturday` `sunday` | Anime scheduled for that specific day |

### Schedule Request Example+Schema [GET]

+ Parameters
    + day (optional, String, `monday`) ... Returns scheduled anime of that specific day
    
+ Response 200 (application/json)

        [
 
        ]
        
## Top [/top/{type}/{page}/{subtype}]
Top items (e.g anime, manga) on MyAnimeList

**Note:** `subtype` returns a filtered top list of a type `type` item. For example, the top Anime (type) movies (subtype)
### Parameters
| Parameter  | Argument | Description |
| ------------- | ------------- | ------------- |
| type | `anime` `manga` | Top items of this type |
| page (optional) | INTEGER | The Top page on MyAnimeList is paginated offers 50 items per page |
| subtype (optional) | **Anime:** `airing` `upcoming` `tv` `movie` `ova` `special` **Manga:** `manga` `novels` `oneshots` `doujin` `manhwa` `manhua` **Both:** `bypopularity` `favorite` |

### Top Request Example+Schema [GET]

+ Parameters
    + type (required, String, `anime`) ... Returns top items of this type
    + page (optional, Integer, `1`) ... Pagination support
    + subtype (optional, String, `upcoming`) ... Returns top items of this type filtered by their subtypes
    
+ Response 200 (application/json)

        [
 
        ]
        
## Meta [/meta/{request}/{type}/{period}]
Requests related to meta information regarding the Jikan REST Instance.
Such as the most requested endpoints for a specific period, or just status on the REST API.

### Parameters
| Parameter  | Argument | Description |
| ------------- | ------------- | ------------- |
| request | `requests` `status` | |
| type | `anime` `manga` `character` `person` `search` `top` `schedule` `season`  | This is only for the `requests` endpoint |
| period  | `today` `weekly` `monthly` | This is only for the `requests` endpoint |

### Meta Request Example+Schema [GET]

+ Parameters
    + request (required, String, `requests`) ... 
    + type (required, String, `anime`) ... 
    + period (required, String, `today`) ... 

+ Response 200 (application/json)

        [
 
        ]